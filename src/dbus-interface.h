/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUS_INTERFACE_H__
#define __DBUS_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for net.sapples.LiveCaptions.External */

#define DBLCAP_TYPE_EXTERNAL (dblcap_external_get_type ())
#define DBLCAP_EXTERNAL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBLCAP_TYPE_EXTERNAL, DBLCapExternal))
#define DBLCAP_IS_EXTERNAL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBLCAP_TYPE_EXTERNAL))
#define DBLCAP_EXTERNAL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBLCAP_TYPE_EXTERNAL, DBLCapExternalIface))

struct _DBLCapExternal;
typedef struct _DBLCapExternal DBLCapExternal;
typedef struct _DBLCapExternalIface DBLCapExternalIface;

struct _DBLCapExternalIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_allow_keep_above) (
    DBLCapExternal *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_keep_above) (DBLCapExternal *object);

};

GType dblcap_external_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dblcap_external_interface_info (void);
guint dblcap_external_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dblcap_external_complete_allow_keep_above (
    DBLCapExternal *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void dblcap_external_call_allow_keep_above (
    DBLCapExternal *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dblcap_external_call_allow_keep_above_finish (
    DBLCapExternal *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dblcap_external_call_allow_keep_above_sync (
    DBLCapExternal *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean dblcap_external_get_keep_above (DBLCapExternal *object);
void dblcap_external_set_keep_above (DBLCapExternal *object, gboolean value);


/* ---- */

#define DBLCAP_TYPE_EXTERNAL_PROXY (dblcap_external_proxy_get_type ())
#define DBLCAP_EXTERNAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBLCAP_TYPE_EXTERNAL_PROXY, DBLCapExternalProxy))
#define DBLCAP_EXTERNAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBLCAP_TYPE_EXTERNAL_PROXY, DBLCapExternalProxyClass))
#define DBLCAP_EXTERNAL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBLCAP_TYPE_EXTERNAL_PROXY, DBLCapExternalProxyClass))
#define DBLCAP_IS_EXTERNAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBLCAP_TYPE_EXTERNAL_PROXY))
#define DBLCAP_IS_EXTERNAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBLCAP_TYPE_EXTERNAL_PROXY))

typedef struct _DBLCapExternalProxy DBLCapExternalProxy;
typedef struct _DBLCapExternalProxyClass DBLCapExternalProxyClass;
typedef struct _DBLCapExternalProxyPrivate DBLCapExternalProxyPrivate;

struct _DBLCapExternalProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DBLCapExternalProxyPrivate *priv;
};

struct _DBLCapExternalProxyClass
{
  GDBusProxyClass parent_class;
};

GType dblcap_external_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBLCapExternalProxy, g_object_unref)
#endif

void dblcap_external_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBLCapExternal *dblcap_external_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DBLCapExternal *dblcap_external_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dblcap_external_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBLCapExternal *dblcap_external_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DBLCapExternal *dblcap_external_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBLCAP_TYPE_EXTERNAL_SKELETON (dblcap_external_skeleton_get_type ())
#define DBLCAP_EXTERNAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBLCAP_TYPE_EXTERNAL_SKELETON, DBLCapExternalSkeleton))
#define DBLCAP_EXTERNAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBLCAP_TYPE_EXTERNAL_SKELETON, DBLCapExternalSkeletonClass))
#define DBLCAP_EXTERNAL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBLCAP_TYPE_EXTERNAL_SKELETON, DBLCapExternalSkeletonClass))
#define DBLCAP_IS_EXTERNAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBLCAP_TYPE_EXTERNAL_SKELETON))
#define DBLCAP_IS_EXTERNAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBLCAP_TYPE_EXTERNAL_SKELETON))

typedef struct _DBLCapExternalSkeleton DBLCapExternalSkeleton;
typedef struct _DBLCapExternalSkeletonClass DBLCapExternalSkeletonClass;
typedef struct _DBLCapExternalSkeletonPrivate DBLCapExternalSkeletonPrivate;

struct _DBLCapExternalSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DBLCapExternalSkeletonPrivate *priv;
};

struct _DBLCapExternalSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dblcap_external_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBLCapExternalSkeleton, g_object_unref)
#endif

DBLCapExternal *dblcap_external_skeleton_new (void);


/* ---- */

#define DBLCAP_TYPE_OBJECT (dblcap_object_get_type ())
#define DBLCAP_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBLCAP_TYPE_OBJECT, DBLCapObject))
#define DBLCAP_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBLCAP_TYPE_OBJECT))
#define DBLCAP_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBLCAP_TYPE_OBJECT, DBLCapObject))

struct _DBLCapObject;
typedef struct _DBLCapObject DBLCapObject;
typedef struct _DBLCapObjectIface DBLCapObjectIface;

struct _DBLCapObjectIface
{
  GTypeInterface parent_iface;
};

GType dblcap_object_get_type (void) G_GNUC_CONST;

DBLCapExternal *dblcap_object_get_external (DBLCapObject *object);
DBLCapExternal *dblcap_object_peek_external (DBLCapObject *object);

#define DBLCAP_TYPE_OBJECT_PROXY (dblcap_object_proxy_get_type ())
#define DBLCAP_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBLCAP_TYPE_OBJECT_PROXY, DBLCapObjectProxy))
#define DBLCAP_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBLCAP_TYPE_OBJECT_PROXY, DBLCapObjectProxyClass))
#define DBLCAP_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBLCAP_TYPE_OBJECT_PROXY, DBLCapObjectProxyClass))
#define DBLCAP_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBLCAP_TYPE_OBJECT_PROXY))
#define DBLCAP_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBLCAP_TYPE_OBJECT_PROXY))

typedef struct _DBLCapObjectProxy DBLCapObjectProxy;
typedef struct _DBLCapObjectProxyClass DBLCapObjectProxyClass;
typedef struct _DBLCapObjectProxyPrivate DBLCapObjectProxyPrivate;

struct _DBLCapObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  DBLCapObjectProxyPrivate *priv;
};

struct _DBLCapObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType dblcap_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBLCapObjectProxy, g_object_unref)
#endif

DBLCapObjectProxy *dblcap_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define DBLCAP_TYPE_OBJECT_SKELETON (dblcap_object_skeleton_get_type ())
#define DBLCAP_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBLCAP_TYPE_OBJECT_SKELETON, DBLCapObjectSkeleton))
#define DBLCAP_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBLCAP_TYPE_OBJECT_SKELETON, DBLCapObjectSkeletonClass))
#define DBLCAP_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBLCAP_TYPE_OBJECT_SKELETON, DBLCapObjectSkeletonClass))
#define DBLCAP_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBLCAP_TYPE_OBJECT_SKELETON))
#define DBLCAP_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBLCAP_TYPE_OBJECT_SKELETON))

typedef struct _DBLCapObjectSkeleton DBLCapObjectSkeleton;
typedef struct _DBLCapObjectSkeletonClass DBLCapObjectSkeletonClass;
typedef struct _DBLCapObjectSkeletonPrivate DBLCapObjectSkeletonPrivate;

struct _DBLCapObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  DBLCapObjectSkeletonPrivate *priv;
};

struct _DBLCapObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType dblcap_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBLCapObjectSkeleton, g_object_unref)
#endif

DBLCapObjectSkeleton *dblcap_object_skeleton_new (const gchar *object_path);
void dblcap_object_skeleton_set_external (DBLCapObjectSkeleton *object, DBLCapExternal *interface_);

/* ---- */

#define DBLCAP_TYPE_OBJECT_MANAGER_CLIENT (dblcap_object_manager_client_get_type ())
#define DBLCAP_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBLCAP_TYPE_OBJECT_MANAGER_CLIENT, DBLCapObjectManagerClient))
#define DBLCAP_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBLCAP_TYPE_OBJECT_MANAGER_CLIENT, DBLCapObjectManagerClientClass))
#define DBLCAP_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBLCAP_TYPE_OBJECT_MANAGER_CLIENT, DBLCapObjectManagerClientClass))
#define DBLCAP_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBLCAP_TYPE_OBJECT_MANAGER_CLIENT))
#define DBLCAP_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBLCAP_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _DBLCapObjectManagerClient DBLCapObjectManagerClient;
typedef struct _DBLCapObjectManagerClientClass DBLCapObjectManagerClientClass;
typedef struct _DBLCapObjectManagerClientPrivate DBLCapObjectManagerClientPrivate;

struct _DBLCapObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  DBLCapObjectManagerClientPrivate *priv;
};

struct _DBLCapObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBLCapObjectManagerClient, g_object_unref)
#endif

GType dblcap_object_manager_client_get_type (void) G_GNUC_CONST;

GType dblcap_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void dblcap_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *dblcap_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *dblcap_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void dblcap_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *dblcap_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *dblcap_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __DBUS_INTERFACE_H__ */
